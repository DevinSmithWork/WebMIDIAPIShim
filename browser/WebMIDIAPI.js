(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
'use strict';var _midi_access=require('./midi/midi_access');var _util=require('./util/util');/* eslint wrap-iife: ["error", "any"] */var midiAccess=void 0;(function(){//    if (!navigator.requestMIDIAccess) {
(0,_util.polyfill)();navigator.requestMIDIAccess=function(){// singleton-ish, no need to create multiple instances of MIDIAccess
if(midiAccess===undefined){midiAccess=(0,_midi_access.createMIDIAccess)();}return midiAccess;};if((0,_util.getDevice)().nodejs===true){navigator.close=function(){// Need to close MIDI input ports, otherwise Node.js will wait for MIDI input forever.
(0,_midi_access.closeAllMIDIInputs)();};}//    }
})();

},{"./midi/midi_access":3,"./util/util":10}],3:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/*
  Creates a MIDIAccess instance:
  - Creates MIDIInput and MIDIOutput instances for the initially connected MIDI devices.
  - Keeps track of newly connected devices and creates the necessary instances of MIDIInput and MIDIOutput.
  - Keeps track of disconnected devices and removes them from the inputs and/or outputs map.
  - Creates a unique id for every device and stores these ids by the name of the device:
    so when a device gets disconnected and reconnected again, it will still have the same id. This
    is in line with the behavior of the native MIDIAccess object.

*/exports.createMIDIAccess=createMIDIAccess;exports.dispatchEvent=dispatchEvent;exports.closeAllMIDIInputs=closeAllMIDIInputs;exports.getMIDIDeviceId=getMIDIDeviceId;var _midi_input=require('./midi_input');var _midi_input2=_interopRequireDefault(_midi_input);var _midi_output=require('./midi_output');var _midi_output2=_interopRequireDefault(_midi_output);var _midiconnection_event=require('./midiconnection_event');var _midiconnection_event2=_interopRequireDefault(_midiconnection_event);var _jazz_instance=require('../util/jazz_instance');var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var midiAccess=void 0;var jazzInstance=void 0;var midiInputs=new _store2.default();var midiOutputs=new _store2.default();var midiInputIds=new _store2.default();var midiOutputIds=new _store2.default();var listeners=new _store2.default();var MIDIAccess=function(){function MIDIAccess(midiInputs,midiOutputs){_classCallCheck(this,MIDIAccess);this.sysexEnabled=true;this.inputs=midiInputs;this.outputs=midiOutputs;}_createClass(MIDIAccess,[{key:'addEventListener',value:function addEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(listeners.has(listener)===false){listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(listeners.has(listener)===true){listeners.delete(listener);}}}]);return MIDIAccess;}();function createMIDIAccess(){return new Promise(function(resolve,reject){if(midiAccess!==undefined){resolve(midiAccess);return;}if((0,_util.getDevice)().browser==='ie9'){reject({message:'WebMIDIAPIShim supports Internet Explorer 10 and above.'});return;}(0,_jazz_instance.createJazzInstance)(function(instance){if(instance===undefined){reject({message:'No access to MIDI devices: browser does not support the WebMIDI API and the Jazz plugin is not installed.'});return;}jazzInstance=instance;createMIDIPorts(function(){setupListeners();midiAccess=new MIDIAccess(midiInputs,midiOutputs);resolve(midiAccess);});});});}// create MIDIInput and MIDIOutput instances for all initially connected MIDI devices
function createMIDIPorts(callback){var inputs=jazzInstance.MidiInList();var outputs=jazzInstance.MidiOutList();var numInputs=inputs.length;var numOutputs=outputs.length;loopCreateMIDIPort(0,numInputs,'input',inputs,function(){loopCreateMIDIPort(0,numOutputs,'output',outputs,callback);});}function loopCreateMIDIPort(index,max,type,list,callback){if(index<max){var name=list[index++];createMIDIPort(type,name,function(){loopCreateMIDIPort(index,max,type,list,callback);});}else{callback();}}function createMIDIPort(type,name,callback){(0,_jazz_instance.getJazzInstance)(type,function(instance){var port=void 0;var info=[name,'',''];if(type==='input'){if(instance.Support('MidiInInfo')){info=instance.MidiInInfo(name);}port=new _midi_input2.default(info,instance);midiInputs.set(port.id,port);}else if(type==='output'){if(instance.Support('MidiOutInfo')){info=instance.MidiOutInfo(name);}port=new _midi_output2.default(info,instance);midiOutputs.set(port.id,port);}callback(port);});}// lookup function: Jazz gives us the name of the connected/disconnected MIDI devices but we have stored them by id
function getPortByName(ports,name){var port=void 0;var values=ports.values();for(var i=0;i<values.length;i+=1){port=values[i];if(port.name===name){break;}}return port;}// keep track of connected/disconnected MIDI devices
function setupListeners(){jazzInstance.OnDisconnectMidiIn(function(name){var port=getPortByName(midiInputs,name);if(port!==undefined){port.state='disconnected';port.close();port._jazzInstance.inputInUse=false;midiInputs.delete(port.id);dispatchEvent(port);}});jazzInstance.OnDisconnectMidiOut(function(name){var port=getPortByName(midiOutputs,name);if(port!==undefined){port.state='disconnected';port.close();port._jazzInstance.outputInUse=false;midiOutputs.delete(port.id);dispatchEvent(port);}});jazzInstance.OnConnectMidiIn(function(name){createMIDIPort('input',name,function(port){dispatchEvent(port);});});jazzInstance.OnConnectMidiOut(function(name){createMIDIPort('output',name,function(port){dispatchEvent(port);});});}// when a device gets connected/disconnected both the port and MIDIAccess dispatch a MIDIConnectionEvent
// therefor we call the ports dispatchEvent function here as well
function dispatchEvent(port){port.dispatchEvent(new _midiconnection_event2.default(port,port));var evt=new _midiconnection_event2.default(midiAccess,port);if(typeof midiAccess.onstatechange==='function'){midiAccess.onstatechange(evt);}listeners.forEach(function(listener){return listener(evt);});}function closeAllMIDIInputs(){midiInputs.forEach(function(input){// input.close();
input._jazzInstance.MidiInClose();});}// check if we have already created a unique id for this device, if so: reuse it, if not: create a new id and store it
function getMIDIDeviceId(name,type){var id=void 0;if(type==='input'){id=midiInputIds.get(name);if(id===undefined){id=(0,_util.generateUUID)();midiInputIds.set(name,id);}}else if(type==='output'){id=midiOutputIds.get(name);if(id===undefined){id=(0,_util.generateUUID)();midiOutputIds.set(name,id);}}return id;}

},{"../util/jazz_instance":8,"../util/store":9,"../util/util":10,"./midi_input":4,"./midi_output":5,"./midiconnection_event":6}],4:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/* eslint prefer-destructuring: 0 *//* eslint no-underscore-dangle: 0 *//* eslint no-bitwise: 0 *//* eslint func-names: 0 *//*
  MIDIInput is a wrapper around an input of a Jazz instance
*/var _midimessage_event=require('./midimessage_event');var _midimessage_event2=_interopRequireDefault(_midimessage_event);var _midiconnection_event=require('./midiconnection_event');var _midiconnection_event2=_interopRequireDefault(_midiconnection_event);var _midi_access=require('./midi_access');var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var midiProc=void 0;var nodejs=(0,_util.getDevice)().nodejs;var MIDIInput=function(){function MIDIInput(info,instance){_classCallCheck(this,MIDIInput);this.id=(0,_midi_access.getMIDIDeviceId)(info[0],'input');this.name=info[0];this.manufacturer=info[1];this.version=info[2];this.type='input';this.state='connected';this.connection='pending';this.onstatechange=null;this._onmidimessage=null;// because we need to implicitly open the device when an onmidimessage handler gets added
// we define a setter that opens the device if the set value is a function
Object.defineProperty(this,'onmidimessage',{set:function set(value){this._onmidimessage=value;if(typeof value==='function'){this.open();}}});this._listeners=new _store2.default().set('midimessage',new _store2.default()).set('statechange',new _store2.default());this._inLongSysexMessage=false;this._sysexBuffer=new Uint8Array();this._jazzInstance=instance;this._jazzInstance.inputInUse=true;// on Linux opening and closing Jazz instances causes the plugin to crash a lot so we open
// the device here and don't close it when close() is called, see below
if((0,_util.getDevice)().platform==='linux'){this._jazzInstance.MidiInOpen(this.name,midiProc.bind(this));}}_createClass(MIDIInput,[{key:'addEventListener',value:function addEventListener(type,listener,useCapture){var listeners=this._listeners.get(type);if(listeners===undefined){return;}if(listeners.has(listener)===false){listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){var listeners=this._listeners.get(type);if(listeners===undefined){return;}if(listeners.has(listener)===false){listeners.delete(listener);}}},{key:'dispatchEvent',value:function dispatchEvent(evt){var listeners=this._listeners.get(evt.type);listeners.forEach(function(listener){listener(evt);});if(evt.type==='midimessage'){if(this._onmidimessage!==null){this._onmidimessage(evt);}}else if(evt.type==='statechange'){if(this.onstatechange!==null){this.onstatechange(evt);}}}},{key:'open',value:function open(){if(this.connection==='open'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiInOpen(this.name,midiProc.bind(this));}this.connection='open';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess
}},{key:'close',value:function close(){if(this.connection==='closed'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiInClose();}this.connection='closed';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess
this._onmidimessage=null;this.onstatechange=null;this._listeners.get('midimessage').clear();this._listeners.get('statechange').clear();}},{key:'_appendToSysexBuffer',value:function _appendToSysexBuffer(data){var oldLength=this._sysexBuffer.length;var tmpBuffer=new Uint8Array(oldLength+data.length);tmpBuffer.set(this._sysexBuffer);tmpBuffer.set(data,oldLength);this._sysexBuffer=tmpBuffer;}},{key:'_bufferLongSysex',value:function _bufferLongSysex(data,initialOffset){var j=initialOffset;while(j<data.length){if(data[j]==0xF7){// end of sysex!
j+=1;this._appendToSysexBuffer(data.slice(initialOffset,j));return j;}j+=1;}// didn't reach the end; just tack it on.
this._appendToSysexBuffer(data.slice(initialOffset,j));this._inLongSysexMessage=true;return j;}}]);return MIDIInput;}();exports.default=MIDIInput;midiProc=function midiProc(timestamp,data){var length=0;var i=void 0;var isSysexMessage=false;// Jazz sometimes passes us multiple messages at once, so we need to parse them out and pass them one at a time.
for(i=0;i<data.length;i+=length){var isValidMessage=true;if(this._inLongSysexMessage){i=this._bufferLongSysex(data,i);if(data[i-1]!=0xf7){// ran off the end without hitting the end of the sysex message
return;}isSysexMessage=true;}else{isSysexMessage=false;switch(data[i]&0xF0){case 0x00:// Chew up spurious 0x00 bytes.  Fixes a Windows problem.
length=1;isValidMessage=false;break;case 0x80:// note off
case 0x90:// note on
case 0xA0:// polyphonic aftertouch
case 0xB0:// control change
case 0xE0:// channel mode
length=3;break;case 0xC0:// program change
case 0xD0:// channel aftertouch
length=2;break;case 0xF0:switch(data[i]){case 0xf0:// letiable-length sysex.
i=this._bufferLongSysex(data,i);if(data[i-1]!=0xf7){// ran off the end without hitting the end of the sysex message
return;}isSysexMessage=true;break;case 0xF1:// MTC quarter frame
case 0xF3:// song select
length=2;break;case 0xF2:// song position pointer
length=3;break;default:length=1;break;}break;}}if(!isValidMessage){continue;}var evt={};evt.receivedTime=parseFloat(timestamp.toString())+this._jazzInstance._perfTimeZero;if(isSysexMessage||this._inLongSysexMessage){evt.data=new Uint8Array(this._sysexBuffer);this._sysexBuffer=new Uint8Array(0);this._inLongSysexMessage=false;}else{evt.data=new Uint8Array(data.slice(i,length+i));}if(nodejs){if(this._onmidimessage){this._onmidimessage(evt);}}else{var e=new _midimessage_event2.default(this,evt.data,evt.receivedTime);this.dispatchEvent(e);}}};

},{"../util/store":9,"../util/util":10,"./midi_access":3,"./midiconnection_event":6,"./midimessage_event":7}],5:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/* eslint prefer-destructuring: 0 *//* eslint no-underscore-dangle: 0 *//*
  MIDIOutput is a wrapper around an output of a Jazz instance
*/var _util=require('../util/util');var _store=require('../util/store');var _store2=_interopRequireDefault(_store);var _midi_access=require('./midi_access');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MIDIOutput=function(){function MIDIOutput(info,instance){_classCallCheck(this,MIDIOutput);this.id=(0,_midi_access.getMIDIDeviceId)(info[0],'output');this.name=info[0];this.manufacturer=info[1];this.version=info[2];this.type='output';this.state='connected';this.connection='pending';this.onmidimessage=null;this.onstatechange=null;this._listeners=new _store2.default();this._inLongSysexMessage=false;this._sysexBuffer=new Uint8Array();this._jazzInstance=instance;this._jazzInstance.outputInUse=true;if((0,_util.getDevice)().platform==='linux'){this._jazzInstance.MidiOutOpen(this.name);}}_createClass(MIDIOutput,[{key:'open',value:function open(){if(this.connection==='open'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiOutOpen(this.name);}this.connection='open';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess
}},{key:'close',value:function close(){if(this.connection==='closed'){return;}if((0,_util.getDevice)().platform!=='linux'){this._jazzInstance.MidiOutClose();}this.connection='closed';(0,_midi_access.dispatchEvent)(this);// dispatch MIDIConnectionEvent via MIDIAccess
this.onstatechange=null;this._listeners.clear();}},{key:'send',value:function send(data,timestamp){var _this=this;var delayBeforeSend=0;if(data.length===0){return false;}if(timestamp){delayBeforeSend=Math.floor(timestamp-performance.now());}if(timestamp&&delayBeforeSend>1){setTimeout(function(){_this._jazzInstance.MidiOutLong(data);},delayBeforeSend);}else{this._jazzInstance.MidiOutLong(data);}return true;}},{key:'clear',value:function clear(){// to be implemented
}},{key:'addEventListener',value:function addEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(this._listeners.has(listener)===false){this._listeners.add(listener);}}},{key:'removeEventListener',value:function removeEventListener(type,listener,useCapture){if(type!=='statechange'){return;}if(this._listeners.has(listener)===false){this._listeners.delete(listener);}}},{key:'dispatchEvent',value:function dispatchEvent(evt){this._listeners.forEach(function(listener){listener(evt);});if(this.onstatechange!==null){this.onstatechange(evt);}}}]);return MIDIOutput;}();exports.default=MIDIOutput;

},{"../util/store":9,"../util/util":10,"./midi_access":3}],6:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MIDIConnectionEvent=function MIDIConnectionEvent(midiAccess,port){_classCallCheck(this,MIDIConnectionEvent);this.bubbles=false;this.cancelBubble=false;this.cancelable=false;this.currentTarget=midiAccess;this.defaultPrevented=false;this.eventPhase=0;this.path=[];this.port=port;this.returnValue=true;this.srcElement=midiAccess;this.target=midiAccess;this.timeStamp=Date.now();this.type='statechange';};exports.default=MIDIConnectionEvent;

},{}],7:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MIDIMessageEvent=function MIDIMessageEvent(port,data,receivedTime){_classCallCheck(this,MIDIMessageEvent);this.bubbles=false;this.cancelBubble=false;this.cancelable=false;this.currentTarget=port;this.data=data;this.defaultPrevented=false;this.eventPhase=0;this.path=[];this.receivedTime=receivedTime;this.returnValue=true;this.srcElement=port;this.target=port;this.timeStamp=Date.now();this.type='midimessage';};exports.default=MIDIMessageEvent;

},{}],8:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.createJazzInstance=createJazzInstance;exports.getJazzInstance=getJazzInstance;var _store=require('./store');var _store2=_interopRequireDefault(_store);var _util=require('./util');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/* eslint no-underscore-dangle: 0 *//*
  Creates instances of the Jazz plugin if necessary. Initially the MIDIAccess creates one main Jazz instance that is used
  to query all initially connected devices, and to track the devices that are being connected or disconnected at runtime.

  For every MIDIInput and MIDIOutput that is created, MIDIAccess queries the getJazzInstance() method for a Jazz instance
  that still have an available input or output. Because Jazz only allows one input and one output per instance, we
  need to create new instances if more than one MIDI input or output device gets connected.

  Note that an existing Jazz instance doesn't get deleted when both its input and output device are disconnected; instead it
  will be reused if a new device gets connected.
*/var jazzPluginInitTime=100;// milliseconds
var jazzInstanceNumber=0;var jazzInstances=new _store2.default();function createJazzInstance(callback){var id='jazz_'+jazzInstanceNumber+'_'+Date.now();jazzInstanceNumber+=1;var objRef=void 0;var activeX=void 0;if((0,_util.getDevice)().nodejs===true){// jazzMidi is available globally in the node environment
objRef=new jazzMidi.MIDI();}else{/*
            generate this html:

            <object id="Jazz1" classid="CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90" class="hidden">
                <object id="Jazz2" type="audio/x-jazz" class="hidden">
                    <p style="visibility:visible;">This page requires <a href=http://jazz-soft.net>Jazz-Plugin</a> ...</p>
                </object>
            </object>
        */activeX=document.createElement('object');activeX.id=id+'ie';activeX.classid='CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90';objRef=document.createElement('object');objRef.id=id;objRef.type='audio/x-jazz';activeX.appendChild(objRef);var p=document.createElement('p');p.appendChild(document.createTextNode('This page requires the '));var a=document.createElement('a');a.appendChild(document.createTextNode('Jazz plugin'));a.href='http://jazz-soft.net/';p.appendChild(a);p.appendChild(document.createTextNode('.'));objRef.appendChild(p);var insertionPoint=document.getElementById('MIDIPlugin');if(!insertionPoint){// Create hidden element
insertionPoint=document.createElement('div');insertionPoint.id='MIDIPlugin';insertionPoint.style.position='absolute';insertionPoint.style.visibility='hidden';insertionPoint.style.left='-9999px';insertionPoint.style.top='-9999px';document.body.appendChild(insertionPoint);}insertionPoint.appendChild(activeX);}setTimeout(function(){var instance=null;if(objRef.isJazz===true){instance=objRef;}else if(activeX.isJazz===true){instance=activeX;}if(instance!==null){instance._perfTimeZero=performance.now();jazzInstances.set(jazzInstanceNumber,instance);}callback(instance);},jazzPluginInitTime);}function getJazzInstance(type,callback){var key=type==='input'?'inputInUse':'outputInUse';var instance=null;var values=jazzInstances.values();for(var i=0;i<values.length;i+=1){var inst=values[i];if(inst[key]!==true){instance=inst;break;}}if(instance===null){createJazzInstance(callback);}else{callback(instance);}}

},{"./store":9,"./util":10}],9:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var idIndex=0;var Store=function(){function Store(){_classCallCheck(this,Store);this.store={};this.keys=[];}_createClass(Store,[{key:"add",value:function add(obj){var id=""+new Date().getTime()+idIndex;idIndex+=1;this.keys.push(id);this.store[id]=obj;}},{key:"set",value:function set(id,obj){this.keys.push(id);this.store[id]=obj;return this;}},{key:"get",value:function get(id){return this.store[id];}},{key:"has",value:function has(id){return this.keys.indexOf(id)!==-1;}},{key:"delete",value:function _delete(id){delete this.store[id];var index=this.keys.indexOf(id);if(index>-1){this.keys.splice(index,1);}return this;}},{key:"values",value:function values(){var elements=[];var l=this.keys.length;for(var i=0;i<l;i+=1){var element=this.store[this.keys[i]];elements.push(element);}return elements;}},{key:"forEach",value:function forEach(cb){var l=this.keys.length;for(var i=0;i<l;i+=1){var element=this.store[this.keys[i]];cb(element);}}},{key:"clear",value:function clear(){this.keys=[];this.store={};}}]);return Store;}();exports.default=Store;

},{}],10:[function(require,module,exports){
(function (process,global){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.getDevice=getDevice;exports.polyfillPerformance=polyfillPerformance;exports.generateUUID=generateUUID;exports.polyfillPromise=polyfillPromise;exports.polyfill=polyfill;/* eslint no-param-reassign: 0 *//* eslint no-bitwise: 0 *//* eslint no-mixed-operators: 0 *//*
  A collection of handy util methods
*/var device=null;// check on what type of device we are running, note that in this context
// a device is a computer not a MIDI device
function getDevice(){if(device!==null){return device;}var platform='undetected';var browser='undetected';if(typeof navigator.nodejs!=='undefined'){device={platform:process.platform,nodejs:true,mobile:platform==='ios'||platform==='android'};return device;}var ua=navigator.userAgent;if(ua.match(/(iPad|iPhone|iPod)/g)){platform='ios';}else if(ua.indexOf('Android')!==-1){platform='android';}else if(ua.indexOf('Linux')!==-1){platform='linux';}else if(ua.indexOf('Macintosh')!==-1){platform='osx';}else if(ua.indexOf('Windows')!==-1){platform='windows';}if(ua.indexOf('Chrome')!==-1){// chrome, chromium and canary
browser='chrome';if(ua.indexOf('OPR')!==-1){browser='opera';}else if(ua.indexOf('Chromium')!==-1){browser='chromium';}}else if(ua.indexOf('Safari')!==-1){browser='safari';}else if(ua.indexOf('Firefox')!==-1){browser='firefox';}else if(ua.indexOf('Trident')!==-1){browser='ie';if(ua.indexOf('MSIE 9')!==-1){browser='ie9';}}if(platform==='ios'){if(ua.indexOf('CriOS')!==-1){browser='chrome';}}device={platform:platform,browser:browser,mobile:platform==='ios'||platform==='android',nodejs:false};return device;}function polyfillPerformance(){// performance is a global variable
if(typeof performance==='undefined'){performance={};}Date.now=Date.now||function(){return new Date().getTime();};if(typeof performance.now==='undefined'){var nowOffset=Date.now();if(typeof performance.timing!=='undefined'&&typeof performance.timing.navigationStart!=='undefined'){nowOffset=performance.timing.navigationStart;}performance.now=function now(){return Date.now()-nowOffset;};}}function generateUUID(){var d=new Date().getTime();var uuid=new Array(64).join('x');// 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
uuid=uuid.replace(/[xy]/g,function(c){var r=(d+Math.random()*16)%16|0;d=Math.floor(d/16);return(c==='x'?r:r&0x3|0x8).toString(16).toUpperCase();});return uuid;}// a very simple implementation of a Promise for Internet Explorer and Nodejs
function polyfillPromise(scope){if(typeof scope.Promise!=='function'){scope.Promise=function promise(executor){this.executor=executor;};scope.Promise.prototype.then=function then(resolve,reject){if(typeof resolve!=='function'){resolve=function resolve(){};}if(typeof reject!=='function'){reject=function reject(){};}this.executor(resolve,reject);};}}function polyfill(){var d=getDevice();// console.log(device);
if(d.browser==='ie'){polyfillPromise(window);}else if(d.nodejs===true){polyfillPromise(global);}polyfillPerformance();}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=WebMIDIAPI.js.map
